################################################################################
# RustIRCd - Example Configuration File
################################################################################
#
# This is a comprehensive configuration file for RustIRCd that covers:
# 1. BARE MINIMUM settings required to start the IRC daemon
# 2. Optional features and modules
# 3. Services integration (like Atheme)
# 4. Advanced networking and security features
#
# Lines marked with "# REQUIRED" are necessary for basic operation.
# All other settings are optional with sensible defaults.
#
################################################################################

################################################################################
# SERVER SETTINGS (REQUIRED)
################################################################################
# Basic server identification and limits.
# These are the minimum settings needed to start the IRC daemon.

[server]
# REQUIRED: Server name (must be a valid domain-like identifier)
name = "example.irc.network"

# REQUIRED: Server description shown in /WHOIS and /LINKS
description = "RustIRCd - A Modern Rust IRC Server"

# REQUIRED: Server version
version = "0.1.0"

# REQUIRED: Server creation date
created = "2024-01-01 00:00:00 UTC"

# REQUIRED: Maximum number of simultaneous client connections
max_clients = 1000

# Maximum channels a client can join (0 = no channels allowed)
max_channels_per_client = 10

# Maximum length limits for various IRC elements
max_channel_name_length = 200
max_nickname_length = 9
max_topic_length = 390
max_away_length = 160
max_kick_length = 160
max_quit_length = 160

# Optional: Administrator contact information (shown in /ADMIN command)
admin_email = "admin@example.irc.network"
admin_location1 = "My IRC Network"
admin_location2 = "https://example.irc.network"

# Optional: Show detailed server information in /STATS
show_server_details_in_stats = true

# Optional: Path to MOTD (Message of the Day) file
# Can be absolute or relative to the working directory
motd_file = "motd.txt"


################################################################################
# CONNECTION CLASSES
################################################################################
# Connection classes allow you to define different connection parameters
# for different groups of users or servers. Each class can specify:
# - Maximum sendq/recvq buffer sizes
# - Ping frequency and connection timeout
# - Maximum clients in the class
# - Per-class connection limits
# - Throttling settings
#
# Classes are referenced by allow blocks and server links.
# IMPORTANT: Define classes BEFORE network.links and security.allow_blocks!

# Default class for general users
[[classes]]
name = "default"
description = "Default connection class for regular users"
max_clients = 1000                  # Maximum number of clients in this class
ping_frequency = 120                # Send PING every 120 seconds
connection_timeout = 300            # Drop connection after 300 seconds of no response
max_sendq = 1048576                 # 1MB send queue (outgoing data buffer)
max_recvq = 8192                    # 8KB receive queue (incoming data buffer)
disable_throttling = false          # Enable throttling for this class
max_connections_per_ip = 5          # Maximum connections per IP for this class
max_connections_per_host = 10       # Maximum connections per host for this class

# Example: High-priority class for trusted users (e.g., opers, bots)
# [[classes]]
# name = "trusted"
# description = "Trusted users with higher limits"
# max_clients = 100
# ping_frequency = 180              # Less frequent pings
# connection_timeout = 600          # Longer timeout
# max_sendq = 5242880               # 5MB send queue
# max_recvq = 16384                 # 16KB receive queue
# disable_throttling = true         # No throttling for trusted users
# max_connections_per_ip = 20       # Allow more connections per IP

# Example: Server class for server-to-server connections
# [[classes]]
# name = "server"
# description = "Server-to-server connections"
# max_clients = 10                  # Maximum number of servers
# ping_frequency = 90               # Frequent pings to detect server disconnects
# connection_timeout = 300
# max_sendq = 10485760              # 10MB send queue for burst traffic
# max_recvq = 32768                 # 32KB receive queue
# disable_throttling = true         # No throttling for server connections

# Example: Limited class for restricted users
# [[classes]]
# name = "restricted"
# description = "Restricted users with lower limits"
# max_clients = 500
# ping_frequency = 60               # More frequent pings
# connection_timeout = 180          # Shorter timeout
# max_sendq = 524288                # 512KB send queue
# max_recvq = 4096                  # 4KB receive queue
# disable_throttling = false
# max_connections_per_ip = 2        # Fewer connections per IP


################################################################################
# NETWORK SETTINGS (REQUIRED)
################################################################################
# Network identification and server linking configuration.

[network]
# REQUIRED: Network name
name = "ExampleNet"

# REQUIRED: Network description
description = "Example IRC Network"

# Optional: Server-to-server links for IRC network federation
# Leave empty ([]) for a standalone server
# Server links can reference connection classes for sendq/recvq management
# NOTE: Classes must be defined above in the [[classes]] section!
links = [
    # Example server link (commented out):
    # { 
    #   name = "hub.example.com",           # Remote server name
    #   hostname = "hub.example.com",       # Remote server hostname/IP
    #   port = 6668,                        # Remote server port
    #   password = "linkpass123",           # Link password (must match on both sides)
    #   tls = false,                        # Use TLS for server connection
    #   outgoing = true,                    # true = we connect to them, false = they connect to us
    #   class = "server"                    # Optional: Connection class (must be defined above)
    # },
    # 
    # Example server link with custom class for high-bandwidth hub:
    # { 
    #   name = "highbw-hub.example.com",
    #   hostname = "highbw-hub.example.com",
    #   port = 6668,
    #   password = "hubpass456",
    #   tls = true,
    #   outgoing = true,
    #   class = "server"                    # Use "server" class with 10MB sendq (defined above)
    # },
]

# Optional: IRC Operators (users with elevated privileges)
# To generate a password hash: echo -n "your_password" | sha256sum
# 
# ============================================================================
# OPERATOR FLAGS (Granular Permissions)
# ============================================================================
# Each operator can have one or more flags that grant specific privileges:
#
# - GlobalOper:      Full operator privileges network-wide
#                    • Can KILL any user on any server
#                    • Can perform all operator commands globally
#                    • Highest privilege level
#
# - LocalOper:       Operator privileges limited to local server only
#                    • Can KILL users on local server only
#                    • Cannot affect remote servers or users
#                    • Good for server-specific moderators
#
# - RemoteConnect:   Can use /CONNECT to link remote servers
#                    • Can establish server-to-server connections
#                    • Required for network topology management
#                    • Use for hub administrators
#
# - LocalConnect:    Can use /CONNECT to link local servers only
#                    • Limited to connecting from this server
#                    • Cannot manage remote server connections
#
# - Administrator:   Enhanced administrative privileges
#                    • Can see secret channels in /WHOIS
#                    • Access to additional server information
#                    • Use for senior staff members
#
# - Spy:             Notified when users /WHOIS them
#                    • Receives alerts when someone queries their info
#                    • Privacy/security feature for high-profile opers
#
# - Squit:           Can use /SQUIT to disconnect servers
#                    • Can forcibly remove servers from the network
#                    • Powerful command - use with caution
#                    • Required for emergency network splits
#
# ============================================================================
# OPERATOR TEMPLATES
# ============================================================================

operators = [
    # --------------------------------------------------------------------
    # TEMPLATE 1: Network Administrator (Full Privileges)
    # --------------------------------------------------------------------
    # Use this for head administrators who need complete network control
    # { 
    #   nickname = "netadmin",
    #   password_hash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",  # SHA256: "password"
    #   hostmask = "*@*.admin.example.com",                    # Restrict to admin hosts
    #   flags = ["GlobalOper", "RemoteConnect", "Administrator", "Squit", "Spy"],
    #   enabled = true
    # },
    #
    # Permissions:
    # ✓ Kill any user network-wide
    # ✓ Connect/disconnect servers
    # ✓ See all channels in WHOIS
    # ✓ SQUIT servers
    # ✓ Receive WHOIS notifications

    # --------------------------------------------------------------------
    # TEMPLATE 2: Local Server Administrator
    # --------------------------------------------------------------------
    # Use this for server administrators who manage a single server
    # { 
    #   nickname = "serveradmin",
    #   password_hash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
    #   hostmask = "*@localhost",                              # Local connections only
    #   flags = ["LocalOper", "LocalConnect", "Administrator"],
    #   enabled = true
    # },
    #
    # Permissions:
    # ✓ Kill users on local server only
    # ✓ Connect servers from this server
    # ✓ See all channels in WHOIS
    # ✗ Cannot kill remote users
    # ✗ Cannot SQUIT servers
    # ✗ Cannot manage remote server connections

    # --------------------------------------------------------------------
    # TEMPLATE 3: Hub Administrator (Server Linking)
    # --------------------------------------------------------------------
    # Use this for operators who manage server topology
    # { 
    #   nickname = "hubadmin",
    #   password_hash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
    #   hostmask = "*@*.hubs.example.com",
    #   flags = ["LocalOper", "RemoteConnect", "Squit"],
    #   enabled = true
    # },
    #
    # Permissions:
    # ✓ Connect/disconnect servers
    # ✓ SQUIT servers (emergency splits)
    # ✓ Kill local users
    # ✗ Cannot kill remote users
    # ✗ No enhanced administrative info

    # --------------------------------------------------------------------
    # TEMPLATE 4: Global Moderator (User Management)
    # --------------------------------------------------------------------
    # Use this for moderators who enforce rules network-wide
    # { 
    #   nickname = "globalmod",
    #   password_hash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
    #   hostmask = "*@*.staff.example.com",
    #   flags = ["GlobalOper"],                                # Only kill permission
    #   enabled = true
    # },
    #
    # Permissions:
    # ✓ Kill any user network-wide
    # ✗ Cannot manage servers
    # ✗ No enhanced administrative info
    # ✗ Cannot SQUIT

    # --------------------------------------------------------------------
    # TEMPLATE 5: Local Moderator (Server-Specific)
    # --------------------------------------------------------------------
    # Use this for moderators limited to one server
    # { 
    #   nickname = "localmod",
    #   password_hash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
    #   hostmask = "*@*.example.com",
    #   flags = ["LocalOper"],                                 # Local kill only
    #   enabled = true
    # },
    #
    # Permissions:
    # ✓ Kill users on local server only
    # ✗ Cannot kill remote users
    # ✗ Cannot manage servers
    # ✗ No enhanced privileges

    # --------------------------------------------------------------------
    # TEMPLATE 6: Services Administrator (Special)
    # --------------------------------------------------------------------
    # Use this for operators who manage services integration
    # { 
    #   nickname = "servicesadmin",
    #   password_hash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",
    #   hostmask = "services@services.example.com",
    #   flags = ["Administrator", "Spy"],                      # Info access only
    #   enabled = true
    # },
    #
    # Permissions:
    # ✓ See all channels in WHOIS
    # ✓ Receive WHOIS notifications
    # ✗ Cannot kill users
    # ✗ Cannot manage servers

    # --------------------------------------------------------------------
    # EXAMPLE: Active Operator (For Testing)
    # --------------------------------------------------------------------
    # Uncomment to create a test operator account
    # { 
    #   nickname = "admin",
    #   password_hash = "5e884898da28047151d0e56f8dc6292773603d0d6aabbdd62a11ef721d1542d8",  # SHA256: "password"
    #   hostmask = "*@*",                                      # WARNING: Allows any host!
    #   flags = ["GlobalOper", "Administrator", "RemoteConnect", "Squit"],
    #   enabled = true
    # },
]

# ============================================================================
# SECURITY RECOMMENDATIONS FOR OPERATORS
# ============================================================================
# 
# 1. HOSTMASKS: Always use restrictive hostmasks!
#    Good: "admin@*.admin.example.com" or "admin@203.0.113.0"
#    Bad:  "*@*" (allows anyone from any host)
#
# 2. PASSWORD HASHES: Never store plain text passwords
#    Generate with: echo -n "your_secure_password" | sha256sum
#
# 3. LEAST PRIVILEGE: Only grant flags that are actually needed
#    Don't give GlobalOper to everyone - use LocalOper when possible
#
# 4. FLAG COMBINATIONS:
#    Common safe combinations:
#    - ["LocalOper"] - Basic moderator
#    - ["LocalOper", "Administrator"] - Server admin
#    - ["GlobalOper", "RemoteConnect", "Administrator"] - Network admin
#    - ["GlobalOper", "RemoteConnect", "Administrator", "Squit"] - Full admin
#
#    Dangerous combinations (use with caution):
#    - ["Squit"] alone - Can split network but not reconnect
#    - ["RemoteConnect", "Squit"] without Oper - Can manage topology but not users
#
# 5. AUDIT LOGGING: Enable logging for all operator actions
#    Monitor OPER, KILL, SQUIT, CONNECT commands
#
# ============================================================================

# Optional: Super servers (services servers with special privileges)
super_servers = [
    # Example services server (see SERVICES section below for more details):
    # { 
    #   name = "services.example.com",      # Services server name
    #   hostname = "services.example.com",  # Services server hostname/IP
    #   port = 6669,                        # Services server port
    #   password = "services123",           # Services link password
    #   tls = false,                        # Use TLS for services connection
    #   privileges = ["all"]                # Privileges granted to this server
    # },
]


################################################################################
# CONNECTION SETTINGS (REQUIRED)
################################################################################
# Network binding and connection limits.

[connection]
# REQUIRED: Default IP address to bind to (0.0.0.0 = all interfaces, 127.0.0.1 = localhost only)
# Individual ports can override this with their own bind_address
bind_address = "0.0.0.0"

# Connection timeout in seconds (how long to wait for client to complete registration)
connection_timeout = 60

# Ping timeout in seconds (how long before disconnecting idle clients)
ping_timeout = 300

# Maximum connections per IP address (can be overridden by connection classes)
max_connections_per_ip = 5

# Maximum connections per hostname (can be overridden by connection classes)
max_connections_per_host = 10

# REQUIRED: Port configuration (at least one client port needed)
# You can define multiple ports for different purposes
# Each port can optionally bind to a specific IP address

# Standard client port (6667 is the traditional IRC port)
[[connection.ports]]
port = 6667
connection_type = "Client"    # "Client" or "Server"
tls = false
description = "Standard IRC port"
# bind_address = "0.0.0.0"    # Optional: Override global bind_address for this port

# Secure client port (6697 is the standard secure IRC port)
# Uncomment this section after enabling TLS in [security.tls]
# [[connection.ports]]
# port = 6697
# connection_type = "Client"
# tls = true
# description = "Secure IRC port (TLS)"
# bind_address = "0.0.0.0"    # Optional: Override global bind_address for this port

# Optional: Server-to-server port for linking
# Uncomment if you want to allow server connections
# [[connection.ports]]
# port = 6668
# connection_type = "Server"
# tls = false
# description = "Server-to-server connections"
# bind_address = "0.0.0.0"    # Optional: Override global bind_address for this port

# Optional: Secure server-to-server port
# [[connection.ports]]
# port = 6698
# connection_type = "Server"
# tls = true
# description = "Secure server-to-server connections"
# bind_address = "0.0.0.0"    # Optional: Override global bind_address for this port

# Example: Bind different ports to different IPs (useful for multi-homed servers)
# [[connection.ports]]
# port = 6667
# connection_type = "Client"
# tls = false
# description = "Public client port"
# bind_address = "192.168.1.100"    # Bind to specific public IP
#
# [[connection.ports]]
# port = 6668
# connection_type = "Server"
# tls = false
# description = "Private server-to-server port"
# bind_address = "10.0.0.50"        # Bind to private network IP


################################################################################
# SECURITY SETTINGS (REQUIRED)
################################################################################

[security]
# Host access control (deprecated - use allow_blocks for more granular control)
allowed_hosts = ["*"]           # Allow all hosts (* = wildcard) - fallback if no allow blocks defined
denied_hosts = []               # Block specific hosts (e.g., ["*.spam.com", "badhost.example.com"])
allow_blocks = []               # Allow blocks - define hosts/IPs and assign them to classes

# Allow blocks - define which hosts/IPs can connect and assign them to classes
# If no allow blocks are defined, all hosts in allowed_hosts are allowed with the default class
# Each allow block assigns connecting users to a specific connection class
# NOTE: Classes must be defined above in the [[classes]] section!

# Example: Default allow block for all users
# [[security.allow_blocks]]
# hosts = ["*"]                 # Allow all hostnames (* = wildcard, *.example.com = pattern)
# ips = ["*"]                   # Allow all IP addresses (* = wildcard, supports CIDR notation)
# class = "default"             # Assign to "default" connection class (must be defined above)
# description = "General users"

# Example: Allow block for trusted hosts
# [[security.allow_blocks]]
# hosts = ["*.trusted.example.com", "operator.example.com"]
# ips = ["192.168.1.0/24", "10.0.0.100"]
# class = "trusted"             # Assign to "trusted" connection class (must be defined above)
# password = "secret123"        # Optional: Require password for these hosts
# max_connections = 50          # Optional: Limit total connections from this block
# description = "Trusted users and operators"

# Example: Allow block for restricted hosts
# [[security.allow_blocks]]
# hosts = ["*.restricted.example.com"]
# ips = ["203.0.113.0/24"]
# class = "restricted"          # Assign to "restricted" connection class (must be defined above)
# description = "Restricted users with lower limits"

# Optional: Require password for client connections (global password, overridden by allow block passwords)
require_client_password = false
client_password = ""            # Set a password if require_client_password = true

# Optional: Enable ident lookups (RFC 1413)
enable_ident = true

# Optional: Enable DNS lookups for hostnames
enable_dns = true

# Optional: Enable reverse DNS lookups
enable_reverse_dns = true

# TLS/SSL Configuration
[security.tls]
enabled = false                 # Set to true to enable TLS
cert_file = "cert.pem"          # Path to SSL certificate
key_file = "key.pem"            # Path to SSL private key
ca_file = ""                    # Optional: Path to CA bundle
version = "1.3"                 # TLS version (1.2 or 1.3)
cipher_suites = [
    "TLS_AES_256_GCM_SHA384",
    "TLS_CHACHA20_POLY1305_SHA256"
]

# Server-to-Server Security
[security.server_security]
allow_remote_connect = true             # Allow remote server connections
require_oper_for_connect = true         # Require operator privileges to initiate connections
allowed_remote_hosts = ["*"]            # Allowed remote server hosts
denied_remote_hosts = []                # Blocked remote server hosts
max_hop_count = 10                      # Maximum hops in server chain
require_server_auth = true              # Require password authentication for server links


################################################################################
# MODULE CONFIGURATION
################################################################################
# Modules extend the IRC server with additional functionality.
# Start with an empty enabled_modules list for bare minimum IRC functionality.

[modules]
module_directory = "modules"
enabled_modules = []            # Start empty; add modules as needed (see below)
module_settings = {}

# ============================================================================
# CORE MODULES (Recommended)
# ============================================================================
# To enable core modules, add them to enabled_modules list:
# enabled_modules = ["channel", "ircv3", "optional"]

# - "channel": Channel management (JOIN, PART, TOPIC, MODE, etc.)
#              Without this, users cannot join channels!
# - "ircv3":   Modern IRC v3 features (SASL, capabilities, message tags, etc.)
# - "optional": Optional IRC features (AWAY, ISON, USERHOST, etc.)

# ============================================================================
# ADMINISTRATIVE MODULES
# ============================================================================
# Add these to enabled_modules for operator functionality:

# - "oper":    Operator authentication and commands
# - "admin":   ADMIN command for showing administrator info
# - "help":    Built-in help system for IRC commands

# ============================================================================
# MODERATION MODULES
# ============================================================================
# Ban and restriction modules (add to enabled_modules as needed):

# - "kline":   K-Line (ban users by host/IP)
# - "gline":   G-Line (global network ban)
# - "dline":   D-Line (ban by IP address)
# - "xline":   X-Line (ban by realname/GECOS)

# ============================================================================
# SPECIAL FEATURES
# ============================================================================

# - "knock":   KNOCK command (request channel invite)
# - "monitor": MONITOR command (notify when users come online)
# - "opme":    OPME command (operators can op themselves in channels)
# - "sasl":    SASL authentication mechanism
# - "set":     SET command for runtime configuration changes

# ============================================================================
# MESSAGING MODULES
# ============================================================================
# Operator messaging features

[modules.messaging]
enabled = false                 # Set to true to enable operator messaging

# WALLOPS - Operator broadcast messages
[modules.messaging.wallops]
enabled = true                  # Enable WALLOPS command
require_operator = true         # Only operators can send WALLOPS
receiver_mode = "w"             # Users with +w mode receive WALLOPS
self_only_mode = true           # Users can only set +w on themselves
mode_requires_operator = false  # Non-operators can set +w on themselves

# GLOBOPS - Global operator messages
[modules.messaging.globops]
enabled = true                  # Enable GLOBOPS command
require_operator = true         # Only operators can send GLOBOPS
receiver_mode = "g"             # Users with +g mode receive GLOBOPS
self_only_mode = false          # Operators can set +g on other users
mode_requires_operator = true   # Only operators can set +g mode

# ============================================================================
# THROTTLING MODULE
# ============================================================================
# Connection throttling prevents abuse by limiting connection rates

[modules.throttling]
enabled = false                         # Set to true to enable throttling

# Maximum connections allowed per IP within time window
max_connections_per_ip = 5

# Time window for connection counting (seconds)
time_window_seconds = 60

# Initial throttling duration for first violation (seconds)
initial_throttle_seconds = 10

# Maximum escalation stages
max_stages = 10

# Factor by which throttling increases per stage (stage N = initial * factor^N)
stage_factor = 10

# How often to clean up expired throttle entries (seconds)
cleanup_interval_seconds = 300


################################################################################
# SERVICES INTEGRATION
################################################################################
# Services provide nickname/channel registration, user accounts, etc.
# Common services packages: Atheme, Anope
#
# To enable services:
# 1. Set enabled_services = ["atheme"] (or your services package)
# 2. Configure the service connection details below
# 3. Add the services server to network.super_servers above
# 4. Configure your services package to connect to this server

[services]
services_directory = "services"
enabled_services = []           # Deprecated - use individual service.enabled instead
services = []                   # Service definitions

# Example Atheme Services Configuration
# Uncomment and configure to enable:

# [[services.services]]
# name = "services.example.com"         # Services server name
# service_type = "atheme"               # Type: "atheme" or "anope"
# hostname = "localhost"                # Services hostname/IP
# port = 6666                           # Port to connect on
# password = "service_link_password"    # Link password
# tls = false                           # Use TLS for services connection
# tls_verify = true                     # Verify TLS certificate
# tls_ca_file = "/etc/ssl/certs/ca.pem" # Custom CA file (optional)
# enabled = true                        # Enable this service
# 
# # Service-specific configuration (all in one place)
# [services.services.config]
# service_name = "services.example.com"
# protocol = "charybdis"                # IRC protocol to use
# uplink_name = "example.irc.network"   # This server's name
# send_password = "service_link_password"     # Password we send
# receive_password = "service_link_password"  # Password we expect
# flags = ["topicburst"]                # Service flags
# class = "server"                      # Connection class
# timeout_seconds = 30
# reconnect_interval = 60
# max_reconnect_attempts = 10

# All service configuration is done in the individual [[services.services]] blocks above
# No need for separate service_settings - everything is configured per-service


################################################################################
# DATABASE CONFIGURATION
################################################################################
# Internal database for history, channel tracking, and activity monitoring

[database]
max_history_size = 10000                # Maximum history entries to keep
history_retention_days = 30             # Days to retain history
enable_channel_tracking = true          # Track channel membership
enable_activity_tracking = true         # Track user activity

# Cache configuration (optional - improves lookup performance by 10-100x)
# All cache settings are optional. If omitted, defaults are used.
user_cache_size = 10000                 # Max cached nickname→UUID mappings
user_cache_ttl_seconds = 300            # User cache TTL (5 minutes)
channel_cache_ttl_seconds = 30          # Channel member cache TTL (30 seconds)

# ┌─────────────────────────────────────────────────────────────────────┐
# │ RECOMMENDED CACHE SETTINGS BY NETWORK SIZE                         │
# ├─────────────────────────────────────────────────────────────────────┤
# │ Small networks (<1000 users):                                       │
# │   user_cache_size = 10000                                           │
# │   user_cache_ttl_seconds = 300        # 5 minutes                   │
# │   channel_cache_ttl_seconds = 30      # 30 seconds                  │
# │   Memory usage: ~10-20 MB                                           │
# ├─────────────────────────────────────────────────────────────────────┤
# │ Medium networks (1000-5000 users):                                  │
# │   user_cache_size = 25000                                           │
# │   user_cache_ttl_seconds = 600        # 10 minutes                  │
# │   channel_cache_ttl_seconds = 60      # 1 minute                    │
# │   Memory usage: ~25-50 MB                                           │
# ├─────────────────────────────────────────────────────────────────────┤
# │ Large networks (5000-10000 users):                                  │
# │   user_cache_size = 50000                                           │
# │   user_cache_ttl_seconds = 900        # 15 minutes                  │
# │   channel_cache_ttl_seconds = 90      # 1.5 minutes                 │
# │   Memory usage: ~50-100 MB                                          │
# ├─────────────────────────────────────────────────────────────────────┤
# │ Very large networks (>10000 users):                                 │
# │   user_cache_size = 100000                                          │
# │   user_cache_ttl_seconds = 1800       # 30 minutes                  │
# │   channel_cache_ttl_seconds = 120     # 2 minutes                   │
# │   Memory usage: ~100-200 MB                                         │
# └─────────────────────────────────────────────────────────────────────┘
#
# Performance impact:
# - User lookups: 10-100x faster when cached
# - Channel queries: 5-50x faster when cached
# - Expected cache hit rate: 95-99% with proper tuning


################################################################################
# BROADCAST CONFIGURATION
################################################################################
# Settings for network-wide queries and message broadcasting

[broadcast]
max_concurrent_queries = 100            # Maximum simultaneous network queries
query_timeout_seconds = 30              # Timeout for network queries
enable_network_queries = true           # Enable network-wide queries
enable_efficient_broadcasting = true    # Use optimized broadcast algorithms


################################################################################
# ADVANCED FEATURES
################################################################################

# ============================================================================
# CUSTOM NUMERIC REPLIES
# ============================================================================
# Customize IRC numeric reply messages
# Create a file with custom messages and reference it here

# replies = "replies.toml"              # Path to custom replies file

# ============================================================================
# IRCV3 EXTENSIONS
# ============================================================================
# When "ircv3" is in enabled_modules, these extensions are available:
# - account-notify: Notify clients when users authenticate
# - away-notify: Notify clients when users go away/return
# - batch: Batch multiple messages together
# - cap: Capability negotiation
# - extended-join: Extended JOIN messages with account info
# - message-tags: Message tags support
# - multi-prefix: Show all user channel modes in names/joins
# - sasl: SASL authentication
# - server-time: Server-time tags on messages

# ============================================================================
# SOLANUM EXTENSIONS
# ============================================================================
# Additional extensions inspired by Solanum IRCd
# Uncomment and configure to enable:

# [modules.ip_cloak]
# enabled = false
# secret_key = "change_this_to_random_string"    # Must be secure and unique
# suffix = ".cloaked"                             # Suffix for cloaked hosts
# ipv4_cidr = 16                                  # IPv4 CIDR for cloaking
# ipv6_cidr = 32                                  # IPv6 CIDR for cloaking
# mac_bits = 64                                   # MAC address bits to preserve
# preserve_patterns = [                           # Don't cloak these patterns
#     "*.example.com",
#     "*.localhost"
# ]

# [modules.opme]
# enabled = false                     # OPME command (operators self-op in channels)
# require_oper = true                 # Require operator privileges
# log_usage = true                    # Log OPME usage
# notify_channel = true               # Notify channel when OPME is used
# rate_limit_enabled = true           # Enable rate limiting
# rate_limit_max_uses = 5             # Maximum uses within time window
# rate_limit_time_window = 300        # Time window in seconds


################################################################################
# QUICK START GUIDE
################################################################################
#
# CONFIGURATION FILE ORDER:
# 1. [server] - Server identification
# 2. [[classes]] - Connection classes (DEFINE THESE FIRST!)
# 3. [network] - Network settings and server links (can reference classes)
# 4. [connection] - Ports and connection settings
# 5. [security] - Security and allow blocks (can reference classes)
# 6. [modules] - Module configuration
# 7. [services] - Services integration
#
# BARE MINIMUM (standalone server):
# 1. Set server.name to your server's hostname
# 2. Define at least one connection class (default class provided above)
# 3. Set network.name to your network name  
# 4. Configure at least one client port (6667 is default)
# 5. Run: cargo run --release
#
# WITH CHANNELS (recommended):
# 1. Add "channel" to modules.enabled_modules
# 2. Restart server
#
# WITH MODERN IRC FEATURES:
# 1. Add "channel", "ircv3", "optional" to modules.enabled_modules
# 2. Restart server
#
# WITH OPERATORS:
# 1. Generate password hash: echo -n "your_password" | sha256sum
# 2. Add operator to network.operators list
# 3. Add "oper" to modules.enabled_modules
# 4. Restart server
# 5. Oper up with: /OPER nickname password
#
# WITH CONNECTION CLASSES AND ALLOW BLOCKS:
# 1. Define connection classes in [[classes]] sections
# 2. Define allow blocks in [[security.allow_blocks]] sections
# 3. Each allow block references a class to assign users to
# 4. Classes control sendq/recvq, timeouts, throttling, etc.
# 5. Server links can also reference classes for sendq management
#
# WITH SERVICES (Atheme/Anope):
# 1. Configure services server in services section (uncomment example)
# 2. Add services to network.super_servers
# 3. Add "atheme" (or your services) to services.enabled_services
# 4. Add "ircv3" and "sasl" to modules.enabled_modules (recommended)
# 5. Configure your services package to link to this server
# 6. Restart both servers
#
# WITH TLS/SSL:
# 1. Generate or obtain SSL certificate and key
# 2. Set security.tls.enabled = true
# 3. Set security.tls.cert_file and security.tls.key_file paths
# 4. Ensure port 6697 is configured (see connection.ports)
# 5. Restart server
#
# WITH PER-PORT IP BINDING:
# 1. Set global connection.bind_address for default behavior
# 2. Override per-port by adding bind_address to individual [[connection.ports]]
# 3. Useful for multi-homed servers with multiple network interfaces
#
################################################################################
#
# ADVANCED FEATURES OVERVIEW
################################################################################
#
# CONNECTION CLASSES:
# Classes group connections with similar parameters. Each class defines:
# - Maximum sendq/recvq buffer sizes
# - Ping frequency and connection timeout
# - Maximum clients and connections per IP/host
# - Throttling behavior
#
# ALLOW BLOCKS:
# Allow blocks define which hosts/IPs can connect and assign them to classes.
# They support:
# - Wildcard patterns (*.example.com)
# - CIDR notation for IPs (192.168.1.0/24)
# - Per-block passwords
# - Maximum connections per block
#
# PER-PORT IP BINDING:
# Each port can bind to a different IP address, useful for:
# - Separating public and private network traffic
# - Multi-homed servers with multiple network interfaces
# - Binding client ports to public IPs and server ports to private IPs
#
# SERVER LINK CLASSES:
# Server links can reference classes for sendq management:
# - High-bandwidth hubs get larger sendq buffers
# - Leaf servers get smaller buffers
# - Different timeout and ping settings per server type
#
################################################################################
# AUTHENTICATION PROVIDERS CONFIGURATION
################################################################################
# Choose ONE of the following authentication methods by uncommenting the desired section
# and commenting out the others. Each method provides SASL authentication support.
#
# To enable SASL authentication:
# 1. Add "sasl" to modules.enabled_modules
# 2. Uncomment ONE of the authentication providers below
# 3. Configure the selected provider with your specific settings
# 4. Set environment variables as needed
# 5. Restart the server

# ================================================================================
# OPTION 1: SUPABASE AUTHENTICATION
# ================================================================================
# Uncomment this section to use Supabase for user authentication
# Requires: Supabase project with users table
# 
# [auth.supabase]
# enabled = true
# project_url = "https://your-project-id.supabase.co"
# api_key = "${SUPABASE_ANON_KEY}"
# user_table = "irc_users"
# username_column = "username"
# password_column = "password_hash"
# email_column = "email"
# use_email_auth = false
# timeout_seconds = 30
# max_connections = 10
# 
# # Required Supabase table schema:
# # CREATE TABLE irc_users (
# #   id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
# #   username TEXT UNIQUE NOT NULL,
# #   email TEXT UNIQUE NOT NULL,
# #   password_hash TEXT NOT NULL,
# #   real_name TEXT,
# #   hostname TEXT,
# #   is_active BOOLEAN DEFAULT true,
# #   created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
# #   updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
# # );

# ================================================================================
# OPTION 2: LDAP AUTHENTICATION
# ================================================================================
# Uncomment this section to use LDAP/Active Directory for user authentication
# 
# [auth.ldap]
# enabled = true
# server_url = "ldaps://ldap.company.com:636"
# bind_dn = "CN=IRC Service,OU=Services,DC=company,DC=com"
# bind_password = "${LDAP_BIND_PASSWORD}"
# base_dn = "OU=Users,DC=company,DC=com"
# username_attribute = "sAMAccountName"
# use_tls = true
# timeout_seconds = 30
# max_connections = 10

# ================================================================================
# OPTION 3: DATABASE AUTHENTICATION
# ================================================================================
# Uncomment this section to use a direct database connection for authentication
# 
# [auth.database]
# enabled = true
# connection_string = "${DATABASE_URL}"
# user_table = "users"
# username_column = "username"
# password_column = "password_hash"
# password_hash_algorithm = "bcrypt"  # Options: bcrypt, argon2, scrypt, pbkdf2
# timeout_seconds = 30
# max_connections = 10
# 
# # Required database table schema:
# # CREATE TABLE users (
# #   id SERIAL PRIMARY KEY,
# #   username VARCHAR(50) UNIQUE NOT NULL,
# #   password_hash VARCHAR(255) NOT NULL,
# #   email VARCHAR(255),
# #   real_name VARCHAR(255),
# #   created_at TIMESTAMP DEFAULT NOW(),
# #   last_login TIMESTAMP,
# #   is_active BOOLEAN DEFAULT TRUE
# # );

# ================================================================================
# OPTION 4: IRC SERVICES AUTHENTICATION (SIMPLIFIED)
# ================================================================================
# Uncomment this section to use IRC services (Atheme, Anope) for authentication
# Services automatically become super servers - no duplication needed!
# 
# # 1. Define the service (automatically becomes super server)
# [[services.services]]
# name = "services.example.org"
# service_type = "atheme"              # or "anope"
# hostname = "localhost"
# port = 6666
# password = "your_atheme_password"
# tls = true                           # Enable TLS for secure connection
# tls_verify = true                    # Verify TLS certificate
# tls_ca_file = "/etc/ssl/certs/ca.pem"  # Custom CA file (optional)
# enabled = true
# 
# # 2. Configure authentication to use services
# [authentication]
# enabled = true
# method = "services"                  # Automatically uses the service above
# require_auth = false
# cache_ttl_seconds = 3600
# max_cache_size = 10000
# 
# # That's it! No duplication, no confusion.
# # The service IS the super server, and authentication automatically uses it.
# 
# # Required Atheme configuration (atheme.conf):
# # [atheme]
# # uplink = "example.irc.network"
# # uplink_password = "your_atheme_password"
# # 
# # [services]
# # name = "services.example.org"
# # 
# # [sasl]
# # enabled = true
# # mechanisms = ["PLAIN", "EXTERNAL"]

# ================================================================================
# OPTION 5: HTTP API AUTHENTICATION
# ================================================================================
# Uncomment this section to use HTTP API for authentication
# 
# [auth.http]
# enabled = true
# base_url = "https://api.example.com"
# auth_endpoint = "/auth/verify"
# method = "POST"  # POST or GET
# headers = { "Authorization" = "Bearer ${API_TOKEN}" }
# timeout_seconds = 30
# max_connections = 10
# 
# # Expected API response format:
# # {
# #   "success": true,
# #   "user": {
# #     "username": "testuser",
# #     "email": "test@example.com",
# #     "real_name": "Test User"
# #   }
# # }

# ================================================================================
# OPTION 6: FILE-BASED AUTHENTICATION
# ================================================================================
# Uncomment this section to use a simple file for authentication
# 
# [auth.file]
# enabled = true
# user_file = "/etc/rustircd/users.conf"
# password_hash_algorithm = "bcrypt"
# 
# # User file format (users.conf):
# # username:password_hash:email:real_name
# # testuser:$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/5Kz8K2:test@example.com:Test User
# # admin:$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/5Kz8K2:admin@example.com:Admin User

################################################################################
# SIMPLIFIED CONFIGURATION EXAMPLES
################################################################################
# Below are complete examples showing the new simplified configuration approach
# Choose the example that matches your authentication needs

# ================================================================================
# EXAMPLE 1: DIRECT AUTHENTICATION (Supabase)
# ================================================================================
# Complete configuration for direct authentication using Supabase
# 
# [authentication]
# enabled = true
# method = "direct"
# require_auth = false
# cache_ttl_seconds = 3600
# max_cache_size = 10000
# primary_provider = "supabase"
# 
# [authentication.direct]
# providers = ["supabase"]
# 
# [authentication.direct.supabase]
# enabled = true
# project_url = "https://your-project.supabase.co"
# api_key = "${SUPABASE_ANON_KEY}"
# user_table = "irc_users"
# username_column = "username"
# password_column = "password_hash"
# email_column = "email"
# use_email_auth = false
# timeout_seconds = 30
# max_connections = 10

# ================================================================================
# EXAMPLE 2: IRC SERVICES AUTHENTICATION (Atheme)
# ================================================================================
# Complete configuration for IRC services authentication using Atheme
# 
# # Service definition (automatically becomes super server)
# [[services.services]]
# name = "services.example.org"
# service_type = "atheme"
# hostname = "services.example.org"
# port = 6697
# password = "your_atheme_password"
# tls = true
# tls_verify = true
# tls_ca_file = "/etc/ssl/certs/ca.pem"
# enabled = true
# 
# # Authentication configuration (automatically uses service above)
# [authentication]
# enabled = true
# method = "services"
# require_auth = false
# cache_ttl_seconds = 3600
# max_cache_size = 10000
# 
# # SASL module configuration
# [modules.sasl]
# enabled = true
# mechanisms = ["PLAIN", "EXTERNAL"]
# require_sasl = false
# timeout_seconds = 300

# ================================================================================
# EXAMPLE 3: PRODUCTION SETUP WITH TLS
# ================================================================================
# Complete production setup with TLS and services
# 
# [server]
# name = "irc.example.com"
# description = "Production IRC Server"
# 
# [connection]
# bind_address = "0.0.0.0"
# ports = [
#     { port = 6667, connection_type = "Client", tls = false },
#     { port = 6697, connection_type = "Client", tls = true }
# ]
# 
# [security.tls]
# enabled = true
# cert_file = "/etc/ssl/certs/irc.example.com.crt"
# key_file = "/etc/ssl/private/irc.example.com.key"
# 
# # Service with TLS
# [[services.services]]
# name = "services.example.org"
# service_type = "atheme"
# hostname = "services.example.org"
# port = 6697
# password = "secure_service_password"
# tls = true
# tls_verify = true
# enabled = true
# 
# # Authentication using services
# [authentication]
# enabled = true
# method = "services"
# require_auth = true
# cache_ttl_seconds = 3600
# 
# # Enable required modules
# [modules]
# enabled_modules = ["sasl", "ircv3", "oper", "admin"]

################################################################################
# SASL MODULE CONFIGURATION
################################################################################
# SASL (Simple Authentication and Security Layer) configuration
# This is required for SASL authentication to work
# 
# [modules.sasl]
# enabled = true
# mechanisms = ["PLAIN", "EXTERNAL"]
# sasl_service = "SaslServ"              # Name of the SASL service (for service-based auth)
# service_name = "services.example.org"  # Service server name (for service-based auth)
# require_sasl = false                   # Whether to require SASL for all users
# timeout_seconds = 300                  # SASL authentication timeout

################################################################################
# AUTHENTICATION MANAGER CONFIGURATION
################################################################################
# Global authentication settings
# 
# [auth]
# primary_provider = "supabase"          # Primary authentication provider name
# cache_ttl_seconds = 3600               # Cache authentication for 1 hour
# max_cache_size = 10000                 # Maximum cached authentications

################################################################################

